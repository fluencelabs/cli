aqua Main

import "@fluencelabs/aqua-lib/builtin.aqua"
import "@fluencelabs/registry/subnetwork.aqua"
import Registry from "@fluencelabs/registry/registry-service.aqua"
import "@fluencelabs/spell/spell_service.aqua"

import "workers.aqua"
import "services.aqua"

export status

service Console("run-console"):
    print(any: âŠ¤)

data Answer:
    answer: string
    peer: string

func status() -> *Answer:
    workersInfo <- getWorkersInfo()
    installationSpells = workersInfo.hosts.defaultWorker.installationSpells
    answers: *Answer
    for s <- installationSpells par:
        on s.workerId via s.hostId:
            answer <- NewService.greeting("fluence")
            answers <<- Answer(answer=answer, peer=s.hostId)

    join answers[installationSpells.length - 1]
    par Peer.timeout(PARTICLE_TTL / 2, "TIMED OUT")
    <- answers
