/**
 * Copyright 2022 Fluence Labs Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { access, cp, readFile, rm, writeFile } from "node:fs/promises";
import path from "node:path";

import { parse } from "yaml";
import { yamlDiffPatch } from "yaml-diff-patch";

import {
  FLUENCE_CONFIG_FILE_NAME,
  FS_OPTIONS,
  Template,
  templates,
} from "../src/lib/const";
import { execPromise, ExecPromiseArg } from "../src/lib/execPromise";
import { localMultiaddrs } from "../src/lib/localNodes";
import {
  FLUENCE_ENV,
  RUN_TESTS_IN_PARALLEL,
} from "../src/lib/setupEnvironment";

type FluenceArg = {
  args?: ExecPromiseArg["args"];
  flags?: ExecPromiseArg["flags"];
  cwd?: string;
};

export const fluence = async ({
  args = [],
  flags,
  cwd = process.cwd(),
}: FluenceArg): ReturnType<typeof execPromise> =>
  execPromise({
    command: "npx",
    args: [
      "ts-node",
      path.relative(
        cwd,
        path.join(
          process.cwd(),
          path.join("tmp", "node_modules", "@fluencelabs", "cli", "bin", "run")
        )
      ),
      ...args,
    ],
    flags,
    options: { cwd },
    printOutput: true,
  });

const initFirstTime = async (template: Template) => {
  const templatePath = path.join("tmp", "templates", template);

  try {
    await access(templatePath);
  } catch {
    await fluence({ args: ["init", templatePath], flags: { template } });
  }

  const fluenceConfigPath = path.join(templatePath, FLUENCE_CONFIG_FILE_NAME);

  const fluenceConfigString = await readFile(fluenceConfigPath, FS_OPTIONS);

  // since the config is generated by the CLI itself, we can be sure that it's valid
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
  const fluenceConfig = parse(fluenceConfigString);

  const newFluenceConfigString = yamlDiffPatch(
    fluenceConfigString,
    fluenceConfig,
    {
      ...fluenceConfig,
      relays:
        process.env[FLUENCE_ENV] === "local"
          ? localMultiaddrs
          : process.env[FLUENCE_ENV],
    }
  );

  await writeFile(fluenceConfigPath, newFluenceConfigString, FS_OPTIONS);

  console.log(`Initialized template "${template}"`);

  return templatePath;
};

// eslint-disable-next-line @typescript-eslint/consistent-type-assertions
const initializedTemplates = templates.reduce<
  Partial<Record<Template, Promise<string>>>
>(
  (acc, val) => ({
    ...acc,
    [val]: initFirstTime(val),
  }),
  {}
) as Record<Template, Promise<string>>;

export const init = async (cwd: string, template: Template): Promise<void> => {
  const templatePath = await initializedTemplates[template];

  try {
    await rm(cwd, { recursive: true });
  } catch {}

  await cp(templatePath, cwd, { recursive: true });
};

export const maybeConcurrentTest = (...args: Parameters<typeof test>): void => {
  if (process.env[RUN_TESTS_IN_PARALLEL] === "false") {
    test(...args);
    return;
  }

  test.concurrent(...args);
};
