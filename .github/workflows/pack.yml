name: Pack fluence-cli

on:
  workflow_call:
    inputs:
      ref:
        description: "Git ref to checkout to"
        type: string
        default: "main"
      tag:
        description: "Release tag to upload artifacts to"
        type: string
        default: "null"
      platform:
        description: "Platform for which to build fluence-cli"
        type: string
        required: true
      upload-to-s3:
        description: "Upload artifact to s3"
        type: boolean
        default: false
      channel:
        description: "Promote version to channel"
        type: string
        default: "null"
      marine-version:
        description: "marine version"
        type: string
        default: "null"
      mrepl-version:
        description: "mrepl version"
        type: string
        default: "null"
      marine-rs-sdk-version:
        description: "marine-rs-sdk version"
        type: string
        default: "null"
      marine-rs-sdk-test-version:
        description: "marine-rs-sdk-test version"
        type: string
        default: "null"
      js-client-snapshots:
        description: "js-client snapshots"
        type: string
        default: "null"
      aqua-snapshots:
        description: "aqua snapshots"
        type: string
        default: "null"
      node-version:
        description: "Node version"
        type: string
        default: "22.10.0"

env:
  CI: true
  FORCE_COLOR: true
  AWS_REGION: "eu-west-1"
  AWS_S3_FORCE_PATH_STYLE: true

jobs:
  pack:
    name: "Pack fluence-cli"
    runs-on: builder

    permissions:
      contents: write
      id-token: write

    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}

    steps:
      - name: Checkout fluence-cli
        uses: actions/checkout@v4
        with:
          repository: fluencelabs/cli
          ref: ${{ inputs.ref }}

      - name: Import secrets
        uses: hashicorp/vault-action@v3.0.0
        id: secrets
        with:
          url: https://vault.fluence.dev
          path: jwt/github
          role: ci
          method: jwt
          jwtGithubAudience: "https://github.com/fluencelabs"
          jwtTtl: 300
          exportToken: false
          secrets: |
            kv/npm-registry/basicauth/ci token | NODE_AUTH_TOKEN;
            kv/cargo-registry/users/ci token | CARGO_REGISTRIES_FLUENCE_TOKEN;
            kv/ci/fcli-binaries id | AWS_ACCESS_KEY_ID ;
            kv/ci/fcli-binaries secret | AWS_SECRET_ACCESS_KEY

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Setup node with self-hosted npm registry
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          registry-url: "https://npm.fluence.dev"
          cache: "yarn"

      - run: yarn install

      - name: Set js-client version
        if: inputs.js-client-snapshots != 'null'
        uses: fluencelabs/github-actions/npm-set-dependency@main
        with:
          package: "@fluencelabs/js-client"
          version: ${{ fromJson(inputs.js-client-snapshots)['js-client'] }}
          package-manager: yarn
          working-directory: packages/cli/package

      - name: Set aqua-api version
        if: inputs.aqua-snapshots != 'null'
        uses: fluencelabs/github-actions/npm-set-dependency@main
        with:
          package: "@fluencelabs/aqua-api"
          version: "${{ fromJson(inputs.aqua-snapshots)['aqua-api'] }}"
          package-manager: yarn
          working-directory: packages/cli/package

      - name: Update versions.json
        uses: ./.github/actions/replace-version
        with:
          versions: |
            {
              "npm": {
                "@fluencelabs/js-client": "${{ inputs.js-client-snapshots == 'null' && 'null' || fromJson(inputs.js-client-snapshots)['js-client'] }}"
              },
              "cargo": {
                "marine": "${{ inputs.marine-version }}",
                "mrepl": "${{ inputs.mrepl-version }}",
                "marine-rs-sdk": "${{ inputs.marine-rs-sdk-version }}",
                "marine-rs-sdk-test": "${{ inputs.marine-rs-sdk-test-version }}"
              }
            }

      - name: Generate snapshot version
        if: inputs.upload-to-s3 != true
        id: version
        uses: fluencelabs/github-actions/generate-snapshot-id@main

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Cache node binaries
        id: cache-node-binaries
        uses: actions/cache@v3
        env:
          cache-name: cache-node-binaries
        with:
          path: packages/cli/package/tmp/cache/node-v${{ inputs.node-version }}-${{ inputs.platform }}
          key: ${{ env.cache-name }}-${{ inputs.node-version }}-${{ inputs.platform }}

      - name: Pack fluence-cli
        run: yarn pack-${{ inputs.platform }}

      - name: Upload fluence-cli
        if: inputs.upload-to-s3 == true
        working-directory: packages/cli/package
        run: yarn upload-${{ inputs.platform }}

      - name: Promote fluence-cli
        if: inputs.channel != 'null' && inputs.platform != 'win32-x64'
        working-directory: packages/cli/package
        run: yarn oclif promote -t ${{ inputs.platform }} --version "$(jq .[] -r ../.github/release-please/manifest.json)" --sha "$(git rev-parse --short HEAD)" --channel ${{ inputs.channel }} --no-xz --indexes

      - name: Promote fluence-cli windows
        if: inputs.channel != 'null' && inputs.platform == 'win32-x64'
        working-directory: packages/cli/package
        run: yarn oclif promote -t ${{ inputs.platform }} --version "$(jq .[] -r ../.github/release-please/manifest.json)" --sha "$(git rev-parse --short HEAD)" --channel ${{ inputs.channel }} --no-xz --win --indexes

      - name: Rename archive
        if: inputs.platform != 'win32-x64'
        run: mv packages/cli/package/dist/fluence-*${{ inputs.platform }}*.tar.gz fluence-cli-${{ inputs.platform }}.tar.gz

      - name: Upload archive to CI
        if: inputs.platform != 'win32-x64'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.platform }}
          path: fluence-cli-${{ inputs.platform }}.tar.gz

      - name: Upload archive to release
        if: inputs.tag != 'null' && inputs.platform != 'win32-x64'
        uses: softprops/action-gh-release@v1
        with:
          files: fluence-cli-${{ inputs.platform }}.tar.gz
          tag_name: ${{ inputs.tag }}

      - name: Rename windows installer
        if: inputs.platform == 'win32-x64'
        run: mv packages/cli/package/dist/win32/fluence-*.exe fluence-cli-${{ inputs.platform }}.exe

      - name: Upload windows installer to CI
        if: inputs.platform == 'win32-x64'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.platform }}
          path: fluence-cli-${{ inputs.platform }}.exe

      - name: Upload windows installer to release
        if: inputs.tag != 'null' && inputs.platform == 'win32-x64'
        uses: softprops/action-gh-release@v1
        with:
          files: fluence-cli-${{ inputs.platform }}.exe
          tag_name: ${{ inputs.tag }}

      - name: Promote fluence-cli to unstable
        if: inputs.tag != 'null' && inputs.platform != 'win32-x64'
        working-directory: packages/cli/package
        run: yarn oclif promote -t ${{ inputs.platform }} --version "$(jq .[] -r ../.github/release-please/manifest.json)" --sha "$(git rev-parse --short HEAD)" --channel unstable --no-xz --indexes

      - name: Promote fluence-cli windows to unstable
        if: inputs.tag != 'null' && inputs.platform == 'win32-x64'
        working-directory: packages/cli/package
        run: yarn oclif promote -t ${{ inputs.platform }} --version "$(jq .[] -r ../.github/release-please/manifest.json)" --sha "$(git rev-parse --short HEAD)" --channel unstable --win --no-xz --indexes
