name: "release-please"

on:
  push:
    branches:
      - "main"
      - "backport/*"

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"

jobs:
  release-please:
    runs-on: ubuntu-latest

    outputs:
      releases-created: ${{ steps.release.outputs.releases_created }}

      fluence-cli-release-created: ${{ steps.release.outputs['release_created'] }}
      fluence-cli-tag-name: ${{ steps.release.outputs['tag_name'] }}

    steps:
      - name: Set release-please config
        id: config
        run: |
          if [[ ${{ github.ref_name }} == main ]]; then echo "config=.github/release-please/config.json" >> $GITHUB_OUTPUT;
          elif [[ ${{ github.ref_name }} =~ ^backport/ ]]; then echo "config=.github/release-please/config-backport.json" >> $GITHUB_OUTPUT;
          fi

      - name: Run release-please
        id: release
        uses: google-github-actions/release-please-action@v4
        with:
          target-branch: ${{ github.ref_name }}
          token: ${{ secrets.FLUENCEBOT_RELEASE_PLEASE_PAT }}
          command: manifest
          config-file: ${{ steps.config.outputs.config }}
          manifest-file: .github/release-please/manifest.json

      - name: Show output from release-please
        if: steps.release.outputs.releases_created
        env:
          RELEASE_PLEASE_OUTPUT: ${{ toJSON(steps.release.outputs) }}
        run: echo "${RELEASE_PLEASE_OUTPUT}" | jq

  promote:
    needs: release-please
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux-x64
          - darwin-x64
          - darwin-arm64
          - win32-x64

    name: "fluence-cli"
    uses: ./.github/workflows/pack.yml
    with:
      ref: ${{ github.ref }}
      tag: ${{ needs.release-please.outputs.fluence-cli-tag-name || 'null' }}
      platform: ${{ matrix.platform }}
      upload-to-s3: true
      channel: "main"

  fluence-cli:
    if: needs.release-please.outputs.fluence-cli-release-created
    runs-on: ubuntu-latest
    needs:
      - release-please

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Import secrets
        uses: hashicorp/vault-action@v3.0.0
        with:
          url: https://vault.fluence.dev
          path: jwt/github
          role: ci
          method: jwt
          jwtGithubAudience: "https://github.com/fluencelabs"
          jwtTtl: 300
          exportToken: false
          secrets: |
            kv/npmjs/fluencebot token | NODE_AUTH_TOKEN

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org"
          cache: "yarn"

      - run: yarn install

      - name: Configure yarn to publish to registry
        run: |
          yarn config set npmRegistryServer "https://registry.npmjs.org"
          yarn config set npmAlwaysAuth true
          yarn config set npmAuthToken $NODE_AUTH_TOKEN

      - name: Publish to npm registry
        run: yarn npm publish --access public --tag unstable

  slack:
    if: always()
    name: "Notify"
    runs-on: ubuntu-latest

    needs:
      - release-please
      - fluence-cli

    permissions:
      contents: read
      id-token: write

    steps:
      - uses: lwhiteley/dependent-jobs-result-check@v1
        id: status
        with:
          statuses: failure
          dependencies: ${{ toJSON(needs) }}

      - name: Log output
        run: |
          echo "statuses:" "${{ steps.status.outputs.statuses }}"
          echo "jobs:" "${{ steps.status.outputs.jobs }}"
          echo "found any?:" "${{ steps.status.outputs.found }}"

      - name: Import secrets
        uses: hashicorp/vault-action@v3.0.0
        with:
          url: https://vault.fluence.dev
          path: jwt/github
          role: ci
          method: jwt
          jwtGithubAudience: "https://github.com/fluencelabs"
          jwtTtl: 300
          exportToken: false
          secrets: |
            kv/slack/release-please webhook | SLACK_WEBHOOK_URL

      - uses: ravsamhq/notify-slack-action@v2
        if: steps.status.outputs.found == 'true'
        with:
          status: "failure"
          notification_title: "*{workflow}* has {status_message}"
          message_format: "${{ steps.status.outputs.jobs }} {status_message} in <{repo_url}|{repo}>"
          footer: "<{run_url}>"
