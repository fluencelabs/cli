name: Run tests with workflow_call

on:
  workflow_call:
    inputs:
      ref:
        description: "Git ref to checkout to"
        type: string
        default: "main"
      fluence-env:
        description: "Fluence environment to run tests against"
        type: string
        default: "local"
      nox-image:
        description: "nox image tag"
        type: string
        default: "null"
      chain-rpc-image:
        description: "chain-rpc image tag"
        type: string
        default: "null"
      chain-deploy-script-image:
        description: "chain-deploy-script image tag"
        type: string
        default: "null"
      subgraph-deploy-script-image:
        description: "subgraph-deploy-script image tag"
        type: string
        default: "null"
      marine-version:
        description: "marine version"
        type: string
        default: "null"
      mrepl-version:
        description: "mrepl version"
        type: string
        default: "null"
      marine-rs-sdk-version:
        description: "marine-rs-sdk version"
        type: string
        default: "null"
      marine-rs-sdk-test-version:
        description: "marine-rs-sdk-test version"
        type: string
        default: "null"
      js-client-snapshots:
        description: "js-client snapshots"
        type: string
        default: "null"
      aqua-snapshots:
        description: "aqua snapshots"
        type: string
        default: "null"
      deal-ts-clients-version:
        description: "deal-ts-clients version"
        type: string
        default: "null"
      spell-version:
        description: "@fluencelabs/spell version"
        type: string
        default: "null"
      installation-spell-version:
        description: "@fluencelabs/installation-spell version"
        type: string
        default: "null"

env:
  CI: true
  FORCE_COLOR: true
  DEBUG: "fcli:*,deal-ts-clients:*"

jobs:
  tests:
    name: "Run tests"
    runs-on: builder
    timeout-minutes: 60

    outputs:
      version: "${{ steps.snapshot.outputs.version }}"

    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout fluence-cli
        uses: actions/checkout@v4
        with:
          repository: fluencelabs/cli
          ref: ${{ inputs.ref }}

      - name: Import secrets
        uses: hashicorp/vault-action@v3.0.0
        id: secrets
        with:
          url: https://vault.fluence.dev
          path: jwt/github
          role: ci
          method: jwt
          jwtGithubAudience: "https://github.com/fluencelabs"
          jwtTtl: 300
          exportToken: false
          secrets: |
            kv/hub.docker.com/fluencebot username | DOCKER_HUB_USERNAME ;
            kv/hub.docker.com/fluencebot password | DOCKER_HUB_PASSWORD ;
            kv/docker-registry/basicauth/ci username | DOCKER_USERNAME ;
            kv/docker-registry/basicauth/ci password | DOCKER_PASSWORD ;
            kv/npm-registry/basicauth/ci token | NODE_AUTH_TOKEN;
            kv/cargo-registry/users/ci token | CARGO_REGISTRIES_FLUENCE_TOKEN

      - name: Set nox image
        run: |
          # set nox image
          case ${{ inputs.nox-image }} in
          # if nox image is not passed from e2e read from versions.json
          'null')
            nox="$(jq .nox src/versions.json -r)"
          ;;
          # else set nox image to snapshot passed from e2e
          *)
            nox=${{ inputs.nox-image }}
          ;;
          esac

          echo "nox image used for tests is $nox"
          echo "NOX_IMAGE=${nox}" >> $GITHUB_ENV

      - name: Set deal images
        run: |
          # set deal images
          case ${{ inputs.chain-rpc-image }} in
          'null')
            chain_rpc="$(jq '.["chain-rpc"]' src/versions.json -r)"
            chain_deploy_script="$(jq '.["chain-deploy-script"]' src/versions.json -r)"
            subgraph_deploy_script="$(jq '.["subgraph-deploy-script"]' src/versions.json -r)"
          ;;
          # else set deal images to snapshots passed from e2e
          *)
            chain_rpc=${{ inputs.chain-rpc-image }}
            chain_deploy_script=${{ inputs.chain-deploy-script-image }}
            subgraph_deploy_script=${{ inputs.subgraph-deploy-script-image }}
          ;;
          esac

          echo "chain-rpc image used for tests is $chain_rpc"
          echo "CHAIN_RPC_IMAGE=${chain_rpc}" >> $GITHUB_ENV

          echo "chain-deploy-script image used for tests is $chain_deploy_script"
          echo "CHAIN_DEPLOY_SCRIPT_IMAGE=${chain_deploy_script}" >> $GITHUB_ENV

          echo "subgraph-deploy-script image used for tests is $subgraph_deploy_script"
          echo "SUBGRAPH_DEPLOY_SCRIPT_IMAGE=${subgraph_deploy_script}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      - name: Login to private docker registry
        uses: docker/login-action@v3
        with:
          registry: docker.fluence.dev
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Setup Rust toolchain
        uses: dsherret/rust-toolchain-file@v1

      - name: Setup node with self-hosted npm registry
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          registry-url: "https://npm.fluence.dev"
          cache: "yarn"

      - run: yarn install

      - name: Configure yarn to publish to private registry
        run: |
          yarn config set npmRegistryServer "https://npm.fluence.dev"
          yarn config set npmAlwaysAuth true
          yarn config set npmAuthToken $NODE_AUTH_TOKEN

      - name: Set js-client version
        if: inputs.js-client-snapshots != 'null'
        uses: fluencelabs/github-actions/npm-set-dependency@main
        with:
          package: "@fluencelabs/js-client"
          version: ${{ fromJson(inputs.js-client-snapshots)['js-client'] }}
          package-manager: yarn

      - name: Set aqua-api version
        if: inputs.aqua-snapshots != 'null'
        uses: fluencelabs/github-actions/npm-set-dependency@main
        with:
          package: "@fluencelabs/aqua-api"
          version: "${{ fromJson(inputs.aqua-snapshots)['aqua-api'] }}"
          package-manager: yarn

      - name: Set deal-ts-clients version
        if: inputs.deal-ts-clients-version != 'null'
        uses: fluencelabs/github-actions/npm-set-dependency@main
        with:
          package: "@fluencelabs/deal-ts-clients"
          version: "${{ inputs.deal-ts-clients-version }}"
          package-manager: yarn

      - name: Set installation-spell version
        if: inputs.installation-spell-version != 'null'
        uses: fluencelabs/github-actions/npm-set-dependency@main
        with:
          package: "@fluencelabs/installation-spell"
          version: "${{ inputs.installation-spell-version }}"
          package-manager: yarn
          flags: "--dev"

      - name: Update versions.json
        uses: ./.github/actions/replace-version
        with:
          versions: |
            {
              "nox": "${{ env.NOX_IMAGE }}",
              "chain-rpc": "${{ env.CHAIN_RPC_IMAGE }}",
              "chain-deploy-script": "${{ env.CHAIN_DEPLOY_SCRIPT_IMAGE }}",
              "subgraph-deploy-script": "${{ env.SUBGRAPH_DEPLOY_SCRIPT_IMAGE }}",
              "npm": {
                "@fluencelabs/spell": "${{ inputs.spell-version == 'null' && 'null' || inputs.spell-version }}"
              },
              "cargo": {
                "marine": "${{ inputs.marine-version }}",
                "mrepl": "${{ inputs.mrepl-version }}",
                "marine-rs-sdk": "${{ inputs.marine-rs-sdk-version }}",
                "marine-rs-sdk-test": "${{ inputs.marine-rs-sdk-test-version }}"
              }
            }

      - name: Run tests
        env:
          FLUENCE_ENV: "${{ inputs.fluence-env }}"
          FLUENCE_USER_DIR: "${{ github.workspace }}/tmp/.fluence"
          CARGO_REGISTRIES_FLUENCE_INDEX: "git://crates.fluence.dev/index"
          CARGO_REGISTRIES_FLUENCE_TOKEN: "${{ steps.secrets.outputs.CARGO_REGISTRIES_FLUENCE_TOKEN }}"
          NPM_CONFIG_REGISTRY: "https://npm.fluence.dev"
        run: yarn test-linux-x64

      - name: Dump container logs
        if: always()
        uses: jwalton/gh-docker-logs@v2

      - name: Dump anvil state
        if: always()
        run: |
          curl http://localhost:8545 \
            -X POST \
            -H "Content-Type: application/json" \
            --data '{"id":0,"jsonrpc":"2.0","method":"anvil_dumpState","params":[]}'

      - name: Stop containers
        if: always()
        working-directory: tmp/templates/quickstart
        run: ../../linux-x64/fluence/bin/run.js local down

      - name: Cleanup
        if: always()
        run: rm -rf tmp ~/.fluence
