// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Conversion from js to aqua > Expect custom type to work 1`] = `
"aqua SomeModule declares *

data InsideArrayE:
    s: u64

data InsideArray:
    e: InsideArrayE

data Nested:
    a: u64

data SomeModule:
    a: u64
    b: Nested
    c: []InsideArray
    d: []InsideArray

func get() -> SomeModule:
    <- SomeModule(
        a=1,
        b=Nested(
            a=1
        ),
        c=[
            InsideArray(
                e=InsideArrayE(
                    s=1
                )
            )
        ],
        d=[
            InsideArray(
                e=InsideArrayE(
                    s=2
                )
            )
        ]
    )
"
`;

exports[`Conversion from js to aqua > Expect test case to match snapshot [
  [
    "1"
  ],
  [
    "2"
  ],
  [
    "3"
  ]
] 1`] = `
"aqua SomeModule declares *

func get() -> [][]string:
    <- [
        [
            "1"
        ],
        [
            "2"
        ],
        [
            "3"
        ]
    ]
"
`;

exports[`Conversion from js to aqua > Expect test case to match snapshot [
  1,
  -2,
  3
] 1`] = `
"aqua SomeModule declares *

func get() -> []i64:
    <- [
        1,
        -2,
        3
    ]
"
`;

exports[`Conversion from js to aqua > Expect test case to match snapshot [
  1,
  2,
  3
] 1`] = `
"aqua SomeModule declares *

func get() -> []u64:
    <- [
        1,
        2,
        3
    ]
"
`;

exports[`Conversion from js to aqua > Expect test case to match snapshot [
  1.1,
  2,
  3
] 1`] = `
"aqua SomeModule declares *

func get() -> []f64:
    <- [
        1.1,
        2,
        3
    ]
"
`;

exports[`Conversion from js to aqua > Expect test case to match snapshot {
  "$$optional": 1
} 1`] = `
"aqua SomeModule declares *

func get() -> ?u64:
    <- ?[1]
"
`;

exports[`Conversion from js to aqua > Expect test case to match snapshot {
  "a": {
    "$$optional": 1,
    "$$isNil": true
  },
  "b": {
    "$$optional": 1.1,
    "$$isNil": true
  },
  "c": {
    "$$optional": [
      {
        "f": "4"
      },
      {
        "f": "5"
      }
    ]
  },
  "d": {
    "$$optional": [
      {
        "f": "5"
      }
    ],
    "$$isNil": true
  }
} 1`] = `
"aqua SomeModule declares *

data C:
    f: string

data D:
    f: string

data SomeModule:
    a: ?u64
    b: ?f64
    c: ?[]C
    d: ?[]D

func get() -> SomeModule:
    <- SomeModule(
        a=nil,
        b=nil,
        c=?[[
            C(
                f="4"
            ),
            C(
                f="5"
            )
        ]],
        d=nil
    )
"
`;

exports[`Conversion from js to aqua > Expect test case to match snapshot {
  "a": {
    "a": [
      2
    ]
  },
  "b": {
    "a": -1,
    "b": 2.2
  },
  "c": [
    {
      "a": "4"
    },
    {
      "a": "5"
    }
  ]
} 1`] = `
"aqua SomeModule declares *

data A:
    a: []u64

data B:
    a: i64
    b: f64

data C:
    a: string

data SomeModule:
    a: A
    b: B
    c: []C

func get() -> SomeModule:
    <- SomeModule(
        a=A(
            a=[
                2
            ]
        ),
        b=B(
            a=-1,
            b=2.2
        ),
        c=[
            C(
                a="4"
            ),
            C(
                a="5"
            )
        ]
    )
"
`;

exports[`Conversion from js to aqua > Expect test case to match snapshot {
  "a": null,
  "b": [],
  "d": {}
} 1`] = `
"aqua SomeModule declares *

data SomeModule:
    a: ?u8
    b: ?u8
    c: ?u8
    d: ?u8

func get() -> SomeModule:
    <- SomeModule(
        a=nil,
        b=nil,
        c=nil,
        d=nil
    )
"
`;

exports[`Conversion from js to aqua > Expect test case to match snapshot 1 1`] = `
"aqua SomeModule declares *

func get() -> u64:
    <- 1
"
`;
