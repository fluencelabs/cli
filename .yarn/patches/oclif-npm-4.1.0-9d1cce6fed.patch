diff --git a/lib/commands/pack/win.js b/lib/commands/pack/win.js
index 36ffafcdb8b92678a7e8e2e2205fd5e877ca2e00..483d38a31da5120501e1ad7b757246c86dcf26b8 100644
--- a/lib/commands/pack/win.js
+++ b/lib/commands/pack/win.js
@@ -14,12 +14,13 @@ const scripts = {
     /* eslint-disable no-useless-escape */
     cmd: (config, additionalCLI) => `@echo off
 setlocal enableextensions
+set NODE_NO_WARNINGS=1
 
 set ${additionalCLI ? `${additionalCLI.toUpperCase()}_BINPATH` : config.scopedEnvVarKey('BINPATH')}=%~dp0\\${additionalCLI ?? config.bin}.cmd
 if exist "%LOCALAPPDATA%\\${config.dirname}\\client\\bin\\${additionalCLI ?? config.bin}.cmd" (
   "%LOCALAPPDATA%\\${config.dirname}\\client\\bin\\${additionalCLI ?? config.bin}.cmd" %*
 ) else (
-  "%~dp0\\..\\client\\bin\\node.exe" "%~dp0\\..\\client\\${additionalCLI ? `${additionalCLI}\\bin\\run` : 'bin\\run'}" %*
+  "%~dp0\\..\\client\\bin\\fluence.cmd" %*
 )
 `,
     nsis: ({ arch, config, customization, defenderOptionDefault, hideDefenderOption, }) => `!include MUI2.nsh
@@ -239,7 +240,7 @@ the CLI should already exist in a directory named after the CLI that is the root
         const { config } = buildConfig;
         const nsisCustomization = config.nsisCustomization ? (0, node_fs_1.readFileSync)(config.nsisCustomization, 'utf8') : '';
         const arches = buildConfig.targets.filter((t) => t.platform === 'win32').map((t) => t.arch);
-        await Tarballs.build(buildConfig, { pack: false, parallel: true, platform: 'win32', tarball: flags.tarball });
+        await Tarballs.build(buildConfig, { pack: true, parallel: true, platform: 'win32', tarball: flags.tarball });
         await Promise.all(arches.map(async (arch) => {
             const installerBase = path.join(buildConfig.tmp, `windows-${arch}-installer`);
             await (0, promises_1.rm)(installerBase, { force: true, recursive: true });
diff --git a/lib/tarballs/bin.js b/lib/tarballs/bin.js
index f05f8a117a9e06d55fe0cf0a93a7cae6db357d2a..f56dcc0535dc880921eef3b29fe2fdfb86c1d9de 100644
--- a/lib/tarballs/bin.js
+++ b/lib/tarballs/bin.js
@@ -33,6 +33,8 @@ if exist "%~dp0..\\bin\\node.exe" (
     const writeUnix = async () => {
         const bin = path.join(baseWorkspace, 'bin', config.bin);
         await fs.promises.writeFile(bin, `#!/usr/bin/env bash
+export NODE_NO_WARNINGS=1
+   
 set -e
 echoerr() { echo "$@" 1>&2; }
 
diff --git a/lib/tarballs/build.js b/lib/tarballs/build.js
index 9ced03f3b1c33334f51b9ff9d133968f557f6854..ab9d6d41a470597b0a6eec2c557b34e34df3a1ff 100644
--- a/lib/tarballs/build.js
+++ b/lib/tarballs/build.js
@@ -48,6 +48,7 @@ async function build(c, options = {}) {
         pjson.oclif.update = pjson.oclif.update || {};
         pjson.oclif.update.s3 = pjson.oclif.update.s3 || {};
         pjson.oclif.update.s3.bucket = c.s3Config.bucket;
+        pjson.workspaces = ['packages/*']
         await (0, fs_extra_1.writeJSON)(pjsonPath, pjson, { spaces: 2 });
     };
     const addDependencies = async () => {
@@ -63,6 +64,22 @@ async function build(c, options = {}) {
                 throw new Error('Yarn 2 is not supported yet. Try using Yarn 1, or Yarn 3');
             }
             else {
+                const packagesPath = path.join(path.resolve(c.root, '..'), 'packages')
+                await Promise.all(
+                (await (0, promises_1.readdir)(packagesPath)).map(async (name) => {
+                    const dirPath = path.join(packagesPath, name)
+                    if ((await (0, promises_1.stat)(dirPath)).isDirectory()) {
+                    const pjonPath = path.join(dirPath, 'package.json')
+                    try {
+                        await (0, promises_1.access)(pjonPath)
+                        const packagePath = path.join(c.workspace(), 'packages', name)
+                        await (0, promises_1.mkdir)(packagePath, {recursive: true})
+                        await (0, fs_extra_1.copy)(pjonPath, path.join(packagePath, 'package.json'))
+                        await (0, promises_1.cp)(path.join(dirPath, 'dist'), path.join(packagePath, 'dist'), {recursive: true})
+                    } catch {}
+                    }
+                }),
+                )
                 try {
                     await exec('yarn workspaces focus --production', { cwd: c.workspace() });
                 }
@@ -72,6 +89,7 @@ async function build(c, options = {}) {
                     }
                     throw error;
                 }
+                await (0, promises_1.rm)(path.join(c.workspace(), '.yarn'), {recursive: true, force: true})
             }
         }
         else {
