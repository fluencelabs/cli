/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.7
 *
 */
import type {
  IFluenceClient as IFluenceClient$$,
  CallParams as CallParams$$,
} from "@fluencelabs/js-client.api";
import {
  v5_callFunction as callFunction$$,
  v5_registerService as registerService$$,
} from "@fluencelabs/js-client.api";

// Services

// Functions
export const upload_deploy_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                               (call %init_peer_id% ("getDataSrv" "config") [] config)
                              )
                              (par
                               (call %init_peer_id% ("tracingSrv" "tracingEvent") ["upload_deploy" "enter"])
                               (null)
                              )
                             )
                             (par
                              (call %init_peer_id% ("tracingSrv" "tracingEvent") ["upload" "enter"])
                              (null)
                             )
                            )
                            (new $deploy_defs
                             (seq
                              (seq
                               (fold config.$.workers w-0
                                (seq
                                 (seq
                                  (seq
                                   (seq
                                    (seq
                                     (par
                                      (call %init_peer_id% ("tracingSrv" "tracingEvent") ["upload_worker_config" "enter"])
                                      (null)
                                     )
                                     (new $spells
                                      (new $services
                                       (seq
                                        (seq
                                         (seq
                                          (seq
                                           (seq
                                            (seq
                                             (fold w-0.$.config.services s-0
                                              (seq
                                               (new $modules
                                                (seq
                                                 (seq
                                                  (seq
                                                   (fold s-0.$.modules m-0
                                                    (seq
                                                     (seq
                                                      (seq
                                                       (seq
                                                        (call %init_peer_id% ("ipfs_client" "upload") ["/dns4/ipfs.fluence.dev/tcp/5001" m-0.$.wasm] wasm)
                                                        (call %init_peer_id% ("ipfs_client" "upload_string") ["/dns4/ipfs.fluence.dev/tcp/5001" m-0.$.config] cfg)
                                                       )
                                                       (call %init_peer_id% ("json" "obj") ["config" cfg "wasm" wasm] Module_obj)
                                                      )
                                                      (ap Module_obj $modules)
                                                     )
                                                     (next m-0)
                                                    )
                                                   )
                                                   (canon %init_peer_id% $modules  #modules_canon)
                                                  )
                                                  (call %init_peer_id% ("json" "obj") ["modules" #modules_canon "name" s-0.$.name] Service_obj)
                                                 )
                                                 (ap Service_obj $services)
                                                )
                                               )
                                               (next s-0)
                                              )
                                             )
                                             (fold w-0.$.config.spells sp-0
                                              (seq
                                               (seq
                                                (seq
                                                 (seq
                                                  (seq
                                                   (seq
                                                    (seq
                                                     (call %init_peer_id% ("ipfs_client" "upload_string") ["/dns4/ipfs.fluence.dev/tcp/5001" sp-0.$.script] script)
                                                     (call %init_peer_id% ("json" "stringify") [sp-0.$.config] cfg_str)
                                                    )
                                                    (call %init_peer_id% ("ipfs_client" "upload_string") ["/dns4/ipfs.fluence.dev/tcp/5001" cfg_str] cfg)
                                                   )
                                                   (call %init_peer_id% ("json" "stringify") [sp-0.$.init_args] init_args_str)
                                                  )
                                                  (call %init_peer_id% ("ipfs_client" "upload_string") ["/dns4/ipfs.fluence.dev/tcp/5001" init_args_str] init_args)
                                                 )
                                                 (call %init_peer_id% ("json" "obj") ["config" cfg "init_args" init_args "name" sp-0.$.name "script" script] SpellDefinition_obj)
                                                )
                                                (ap SpellDefinition_obj $spells)
                                               )
                                               (next sp-0)
                                              )
                                             )
                                            )
                                            (canon %init_peer_id% $services  #services_canon)
                                           )
                                           (canon %init_peer_id% $spells  #spells_canon)
                                          )
                                          (call %init_peer_id% ("json" "obj") ["services" #services_canon "spells" #spells_canon] WorkerDefinition_obj)
                                         )
                                         (call %init_peer_id% ("json" "stringify") [WorkerDefinition_obj] json)
                                        )
                                        (call %init_peer_id% ("ipfs_client" "upload_string") ["/dns4/ipfs.fluence.dev/tcp/5001" json] cid)
                                       )
                                      )
                                     )
                                    )
                                    (par
                                     (call %init_peer_id% ("tracingSrv" "tracingEvent") ["upload_worker_config" "exit"])
                                     (null)
                                    )
                                   )
                                   (call %init_peer_id% ("json" "obj") ["definition" cid "hosts" w-0.$.hosts "name" w-0.$.name] WorkerDeployDefinition_obj)
                                  )
                                  (ap WorkerDeployDefinition_obj $deploy_defs)
                                 )
                                 (next w-0)
                                )
                               )
                               (canon %init_peer_id% $deploy_defs  #deploy_defs_canon)
                              )
                              (call %init_peer_id% ("json" "obj") ["installation_script" config.$.installation_script "installation_trigger" config.$.installation_trigger "workers" #deploy_defs_canon] AppDeployDefinition_obj)
                             )
                            )
                           )
                           (par
                            (call %init_peer_id% ("tracingSrv" "tracingEvent") ["upload" "exit"])
                            (null)
                           )
                          )
                          (par
                           (call %init_peer_id% ("tracingSrv" "tracingEvent") ["deploy" "enter"])
                           (null)
                          )
                         )
                         (new $workers
                          (seq
                           (seq
                            (fold AppDeployDefinition_obj.$.workers w-1-0
                             (seq
                              (new $spells-0
                               (seq
                                (seq
                                 (seq
                                  (seq
                                   (fold w-1-0.$.hosts h-0
                                    (seq
                                     (seq
                                      (call -relay- ("op" "noop") [])
                                      (xor
                                       (seq
                                        (seq
                                         (seq
                                          (seq
                                           (seq
                                            (seq
                                             (par
                                              (seq
                                               (call -relay- ("op" "noop") [])
                                               (call %init_peer_id% ("tracingSrv" "tracingEvent") ["deploy_single_worker" "enter"])
                                              )
                                              (null)
                                             )
                                             (new $spell_id
                                              (new $worker_id
                                               (seq
                                                (seq
                                                 (seq
                                                  (seq
                                                   (seq
                                                    (call h-0 ("json" "obj") ["deal_id" "dummy-deal-id-123" "ipfs" "/dns4/ipfs.fluence.dev/tcp/5001" "worker_def_cid" w-1-0.$.definition] WorkerSpellArgs_obj)
                                                    (xor
                                                     (call h-0 ("worker" "create") [] $worker_id)
                                                     (call h-0 ("worker" "get_peer_id") [] $worker_id)
                                                    )
                                                   )
                                                   (new $worker_id_test
                                                    (seq
                                                     (seq
                                                      (seq
                                                       (call h-0 ("math" "add") [0 1] worker_id_incr)
                                                       (fold $worker_id worker_id_fold_var
                                                        (seq
                                                         (seq
                                                          (ap worker_id_fold_var $worker_id_test)
                                                          (canon h-0 $worker_id_test  #worker_id_iter_canon)
                                                         )
                                                         (xor
                                                          (match #worker_id_iter_canon.length worker_id_incr
                                                           (null)
                                                          )
                                                          (next worker_id_fold_var)
                                                         )
                                                        )
                                                        (never)
                                                       )
                                                      )
                                                      (canon h-0 $worker_id_test  #worker_id_result_canon)
                                                     )
                                                     (ap #worker_id_result_canon worker_id_gate)
                                                    )
                                                   )
                                                  )
                                                  (xor
                                                   (xor
                                                    (seq
                                                     (seq
                                                      (seq
                                                       (call worker_id_gate.$.[0] ("srv" "resolve_alias") ["worker-spell"] $spell_id)
                                                       (call worker_id_gate.$.[0] ("json" "stringify") [w-1-0.$.definition] app_cid)
                                                      )
                                                      (new $spell_id_test
                                                       (seq
                                                        (seq
                                                         (seq
                                                          (call worker_id_gate.$.[0] ("math" "add") [0 1] spell_id_incr)
                                                          (fold $spell_id spell_id_fold_var
                                                           (seq
                                                            (seq
                                                             (ap spell_id_fold_var $spell_id_test)
                                                             (canon worker_id_gate.$.[0] $spell_id_test  #spell_id_iter_canon)
                                                            )
                                                            (xor
                                                             (match #spell_id_iter_canon.length spell_id_incr
                                                              (null)
                                                             )
                                                             (next spell_id_fold_var)
                                                            )
                                                           )
                                                           (never)
                                                          )
                                                         )
                                                         (canon worker_id_gate.$.[0] $spell_id_test  #spell_id_result_canon)
                                                        )
                                                        (ap #spell_id_result_canon spell_id_gate)
                                                       )
                                                      )
                                                     )
                                                     (call worker_id_gate.$.[0] (spell_id_gate.$.[0] "set_string") ["worker_def_cid" app_cid])
                                                    )
                                                    (call worker_id_gate.$.[0] ("spell" "install") [AppDeployDefinition_obj.$.installation_script WorkerSpellArgs_obj AppDeployDefinition_obj.$.installation_trigger] $spell_id)
                                                   )
                                                   (seq
                                                    (seq
                                                     (call -relay- ("op" "noop") [])
                                                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                                    )
                                                    (call -relay- ("op" "noop") [])
                                                   )
                                                  )
                                                 )
                                                 (new $spell_id_test-0
                                                  (seq
                                                   (seq
                                                    (seq
                                                     (call h-0 ("math" "add") [0 1] spell_id_incr-0)
                                                     (fold $spell_id spell_id_fold_var-0
                                                      (seq
                                                       (seq
                                                        (ap spell_id_fold_var-0 $spell_id_test-0)
                                                        (canon h-0 $spell_id_test-0  #spell_id_iter_canon-0)
                                                       )
                                                       (xor
                                                        (match #spell_id_iter_canon-0.length spell_id_incr-0
                                                         (null)
                                                        )
                                                        (next spell_id_fold_var-0)
                                                       )
                                                      )
                                                      (never)
                                                     )
                                                    )
                                                    (canon h-0 $spell_id_test-0  #spell_id_result_canon-0)
                                                   )
                                                   (ap #spell_id_result_canon-0 spell_id_gate-0)
                                                  )
                                                 )
                                                )
                                                (new $worker_id_test-0
                                                 (seq
                                                  (seq
                                                   (seq
                                                    (call h-0 ("math" "add") [0 1] worker_id_incr-0)
                                                    (fold $worker_id worker_id_fold_var-0
                                                     (seq
                                                      (seq
                                                       (ap worker_id_fold_var-0 $worker_id_test-0)
                                                       (canon h-0 $worker_id_test-0  #worker_id_iter_canon-0)
                                                      )
                                                      (xor
                                                       (match #worker_id_iter_canon-0.length worker_id_incr-0
                                                        (null)
                                                       )
                                                       (next worker_id_fold_var-0)
                                                      )
                                                     )
                                                     (never)
                                                    )
                                                   )
                                                   (canon h-0 $worker_id_test-0  #worker_id_result_canon-0)
                                                  )
                                                  (ap #worker_id_result_canon-0 worker_id_gate-0)
                                                 )
                                                )
                                               )
                                              )
                                             )
                                            )
                                            (par
                                             (seq
                                              (call -relay- ("op" "noop") [])
                                              (call %init_peer_id% ("tracingSrv" "tracingEvent") ["deploy_single_worker" "exit"])
                                             )
                                             (null)
                                            )
                                           )
                                           (call h-0 ("json" "obj") ["host_id" h-0 "spell_id" spell_id_gate-0.$.[0] "worker_id" worker_id_gate-0.$.[0]] DeployedSpell_obj)
                                          )
                                          (ap DeployedSpell_obj $spells-0)
                                         )
                                         (call -relay- ("op" "noop") [])
                                        )
                                        (xor
                                         (par
                                          (seq
                                           (new $array-inline
                                            (seq
                                             (seq
                                              (seq
                                               (seq
                                                (seq
                                                 (ap "deployed spell" $array-inline)
                                                 (ap spell_id_gate-0.$.[0] $array-inline)
                                                )
                                                (ap worker_id_gate-0.$.[0] $array-inline)
                                               )
                                               (ap "to" $array-inline)
                                              )
                                              (ap h-0 $array-inline)
                                             )
                                             (canon %init_peer_id% $array-inline  #array-inline-0)
                                            )
                                           )
                                           (call %init_peer_id% ("run-console" "print") [#array-inline-0])
                                          )
                                          (null)
                                         )
                                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                                        )
                                       )
                                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                                      )
                                     )
                                     (next h-0)
                                    )
                                   )
                                   (canon %init_peer_id% $spells-0  #spells-0_canon)
                                  )
                                  (call %init_peer_id% ("json" "obj") ["definition" w-1-0.$.definition "installation_spells" #spells-0_canon "name" w-1-0.$.name] DeployedWorkers_obj)
                                 )
                                 (ap DeployedWorkers_obj $workers)
                                )
                                (xor
                                 (par
                                  (seq
                                   (new $array-inline-1
                                    (seq
                                     (seq
                                      (seq
                                       (ap "deployed workers" $array-inline-1)
                                       (canon %init_peer_id% $workers  #push-to-stream-202)
                                      )
                                      (ap #push-to-stream-202 $array-inline-1)
                                     )
                                     (canon %init_peer_id% $array-inline-1  #array-inline-1-0)
                                    )
                                   )
                                   (call %init_peer_id% ("run-console" "print") [#array-inline-1-0])
                                  )
                                  (null)
                                 )
                                 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                                )
                               )
                              )
                              (next w-1-0)
                             )
                            )
                            (canon %init_peer_id% $workers  #workers_canon)
                           )
                           (call %init_peer_id% ("json" "obj") ["workers" #workers_canon] DeployedAppWorkers_obj)
                          )
                         )
                        )
                        (par
                         (call %init_peer_id% ("tracingSrv" "tracingEvent") ["deploy" "exit"])
                         (null)
                        )
                       )
                       (par
                        (call %init_peer_id% ("tracingSrv" "tracingEvent") ["upload_deploy" "exit"])
                        (null)
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [DeployedAppWorkers_obj])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
                    )
    `;
export type Upload_deployArgConfig = {
  installation_script: string;
  installation_trigger: {
    blockchain: { end_block: number; start_block: number };
    clock: { end_sec: number; period_sec: number; start_sec: number };
    connections: { connect: boolean; disconnect: boolean };
  };
  workers: {
    config: {
      services: { modules: { config: string; wasm: string }[]; name: string }[];
      spells: {
        config: {
          blockchain: { end_block: number; start_block: number };
          clock: { end_sec: number; period_sec: number; start_sec: number };
          connections: { connect: boolean; disconnect: boolean };
        };
        init_args: any;
        name: string;
        script: string;
      }[];
    };
    hosts: string[];
    name: string;
  }[];
};
export type Upload_deployResult = {
  workers: {
    definition: string;
    installation_spells: {
      host_id: string;
      spell_id: string;
      worker_id: string;
    }[];
    name: string;
  }[];
};
export function upload_deploy(
  config_: Upload_deployArgConfig,
  config?: { ttl?: number }
): Promise<Upload_deployResult>;

export function upload_deploy(
  peer: IFluenceClient$$,
  config_: Upload_deployArgConfig,
  config?: { ttl?: number }
): Promise<Upload_deployResult>;

export function upload_deploy(...args: any) {
  return callFunction$$(
    args,
    {
      functionName: "upload_deploy",
      arrow: {
        tag: "arrow",
        domain: {
          tag: "labeledProduct",
          fields: {
            config: {
              tag: "struct",
              name: "LocalAppDeployConfig",
              fields: {
                installation_script: {
                  tag: "scalar",
                  name: "string",
                },
                installation_trigger: {
                  tag: "struct",
                  name: "TriggerConfig",
                  fields: {
                    blockchain: {
                      tag: "struct",
                      name: "BlockChainConfig",
                      fields: {
                        end_block: {
                          tag: "scalar",
                          name: "u32",
                        },
                        start_block: {
                          tag: "scalar",
                          name: "u32",
                        },
                      },
                    },
                    clock: {
                      tag: "struct",
                      name: "ClockConfig",
                      fields: {
                        end_sec: {
                          tag: "scalar",
                          name: "u32",
                        },
                        period_sec: {
                          tag: "scalar",
                          name: "u32",
                        },
                        start_sec: {
                          tag: "scalar",
                          name: "u32",
                        },
                      },
                    },
                    connections: {
                      tag: "struct",
                      name: "ConnectionPoolConfig",
                      fields: {
                        connect: {
                          tag: "scalar",
                          name: "bool",
                        },
                        disconnect: {
                          tag: "scalar",
                          name: "bool",
                        },
                      },
                    },
                  },
                },
                workers: {
                  tag: "array",
                  type: {
                    tag: "struct",
                    name: "LocalWorkerDeployConfig",
                    fields: {
                      config: {
                        tag: "struct",
                        name: "LocalWorkerConfig",
                        fields: {
                          services: {
                            tag: "array",
                            type: {
                              tag: "struct",
                              name: "LocalService",
                              fields: {
                                modules: {
                                  tag: "array",
                                  type: {
                                    tag: "struct",
                                    name: "LocalModule",
                                    fields: {
                                      config: {
                                        tag: "scalar",
                                        name: "string",
                                      },
                                      wasm: {
                                        tag: "scalar",
                                        name: "string",
                                      },
                                    },
                                  },
                                },
                                name: {
                                  tag: "scalar",
                                  name: "string",
                                },
                              },
                            },
                          },
                          spells: {
                            tag: "array",
                            type: {
                              tag: "struct",
                              name: "LocalSpell",
                              fields: {
                                config: {
                                  tag: "struct",
                                  name: "TriggerConfig",
                                  fields: {
                                    blockchain: {
                                      tag: "struct",
                                      name: "BlockChainConfig",
                                      fields: {
                                        end_block: {
                                          tag: "scalar",
                                          name: "u32",
                                        },
                                        start_block: {
                                          tag: "scalar",
                                          name: "u32",
                                        },
                                      },
                                    },
                                    clock: {
                                      tag: "struct",
                                      name: "ClockConfig",
                                      fields: {
                                        end_sec: {
                                          tag: "scalar",
                                          name: "u32",
                                        },
                                        period_sec: {
                                          tag: "scalar",
                                          name: "u32",
                                        },
                                        start_sec: {
                                          tag: "scalar",
                                          name: "u32",
                                        },
                                      },
                                    },
                                    connections: {
                                      tag: "struct",
                                      name: "ConnectionPoolConfig",
                                      fields: {
                                        connect: {
                                          tag: "scalar",
                                          name: "bool",
                                        },
                                        disconnect: {
                                          tag: "scalar",
                                          name: "bool",
                                        },
                                      },
                                    },
                                  },
                                },
                                init_args: {
                                  tag: "topType",
                                },
                                name: {
                                  tag: "scalar",
                                  name: "string",
                                },
                                script: {
                                  tag: "scalar",
                                  name: "string",
                                },
                              },
                            },
                          },
                        },
                      },
                      hosts: {
                        tag: "array",
                        type: {
                          tag: "scalar",
                          name: "string",
                        },
                      },
                      name: {
                        tag: "scalar",
                        name: "string",
                      },
                    },
                  },
                },
              },
            },
          },
        },
        codomain: {
          tag: "unlabeledProduct",
          items: [
            {
              tag: "struct",
              name: "DeployedAppWorkers",
              fields: {
                workers: {
                  tag: "array",
                  type: {
                    tag: "struct",
                    name: "DeployedWorkers",
                    fields: {
                      definition: {
                        tag: "scalar",
                        name: "string",
                      },
                      installation_spells: {
                        tag: "array",
                        type: {
                          tag: "struct",
                          name: "DeployedSpell",
                          fields: {
                            host_id: {
                              tag: "scalar",
                              name: "string",
                            },
                            spell_id: {
                              tag: "scalar",
                              name: "string",
                            },
                            worker_id: {
                              tag: "scalar",
                              name: "string",
                            },
                          },
                        },
                      },
                      name: {
                        tag: "scalar",
                        name: "string",
                      },
                    },
                  },
                },
              },
            },
          ],
        },
      },
      names: {
        relay: "-relay-",
        getDataSrv: "getDataSrv",
        callbackSrv: "callbackSrv",
        responseSrv: "callbackSrv",
        responseFnName: "response",
        errorHandlingSrv: "errorHandlingSrv",
        errorFnName: "error",
      },
    },
    upload_deploy_script
  );
}

export const get_logs_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "app_workers") [] app_workers)
                         )
                         (par
                          (call %init_peer_id% ("tracingSrv" "tracingEvent") ["get_logs" "enter"])
                          (null)
                         )
                        )
                        (fold app_workers.$.workers w-0
                         (seq
                          (fold w-0.$.installation_spells i-0
                           (seq
                            (seq
                             (seq
                              (call -relay- ("op" "noop") [])
                              (call i-0.$.host_id ("op" "noop") [])
                             )
                             (xor
                              (seq
                               (seq
                                (seq
                                 (seq
                                  (call i-0.$.worker_id (i-0.$.spell_id "list_get_strings") ["logs"] get_res)
                                  (call i-0.$.worker_id ("json" "obj") ["host_id" i-0.$.host_id "logs" get_res.$.strings "spell_id" i-0.$.spell_id "worker_id" i-0.$.worker_id "worker_name" w-0.$.name] LogDirect_obj)
                                 )
                                 (ap LogDirect_obj $logs)
                                )
                                (call i-0.$.host_id ("op" "noop") [])
                               )
                               (call -relay- ("op" "noop") [])
                              )
                              (seq
                               (seq
                                (call i-0.$.host_id ("op" "noop") [])
                                (call -relay- ("op" "noop") [])
                               )
                               (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                              )
                             )
                            )
                            (next i-0)
                           )
                          )
                          (next w-0)
                         )
                        )
                       )
                       (par
                        (call %init_peer_id% ("tracingSrv" "tracingEvent") ["get_logs" "exit"])
                        (null)
                       )
                      )
                      (xor
                       (seq
                        (canon %init_peer_id% $logs  #logs_canon)
                        (call %init_peer_id% ("callbackSrv" "response") [#logs_canon])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `;
export type Get_logsArgApp_workers = {
  workers: {
    definition: string;
    installation_spells: {
      host_id: string;
      spell_id: string;
      worker_id: string;
    }[];
    name: string;
  }[];
};

export function get_logs(
  app_workers: Get_logsArgApp_workers,
  config?: { ttl?: number }
): Promise<
  {
    host_id: string;
    logs: string[];
    spell_id: string;
    worker_id: string;
    worker_name: string;
  }[]
>;

export function get_logs(
  peer: IFluenceClient$$,
  app_workers: Get_logsArgApp_workers,
  config?: { ttl?: number }
): Promise<
  {
    host_id: string;
    logs: string[];
    spell_id: string;
    worker_id: string;
    worker_name: string;
  }[]
>;

export function get_logs(...args: any) {
  return callFunction$$(
    args,
    {
      functionName: "get_logs",
      arrow: {
        tag: "arrow",
        domain: {
          tag: "labeledProduct",
          fields: {
            app_workers: {
              tag: "struct",
              name: "DeployedAppWorkers",
              fields: {
                workers: {
                  tag: "array",
                  type: {
                    tag: "struct",
                    name: "DeployedWorkers",
                    fields: {
                      definition: {
                        tag: "scalar",
                        name: "string",
                      },
                      installation_spells: {
                        tag: "array",
                        type: {
                          tag: "struct",
                          name: "DeployedSpell",
                          fields: {
                            host_id: {
                              tag: "scalar",
                              name: "string",
                            },
                            spell_id: {
                              tag: "scalar",
                              name: "string",
                            },
                            worker_id: {
                              tag: "scalar",
                              name: "string",
                            },
                          },
                        },
                      },
                      name: {
                        tag: "scalar",
                        name: "string",
                      },
                    },
                  },
                },
              },
            },
          },
        },
        codomain: {
          tag: "unlabeledProduct",
          items: [
            {
              tag: "array",
              type: {
                tag: "struct",
                name: "LogDirect",
                fields: {
                  worker_id: {
                    tag: "scalar",
                    name: "string",
                  },
                  worker_name: {
                    tag: "scalar",
                    name: "string",
                  },
                  host_id: {
                    tag: "scalar",
                    name: "string",
                  },
                  logs: {
                    tag: "array",
                    type: {
                      tag: "scalar",
                      name: "string",
                    },
                  },
                  spell_id: {
                    tag: "scalar",
                    name: "string",
                  },
                },
              },
            },
          ],
        },
      },
      names: {
        relay: "-relay-",
        getDataSrv: "getDataSrv",
        callbackSrv: "callbackSrv",
        responseSrv: "callbackSrv",
        responseFnName: "response",
        errorHandlingSrv: "errorHandlingSrv",
        errorFnName: "error",
      },
    },
    get_logs_script
  );
}

export const get_logs_deal_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "deals") [] deals)
                         )
                         (par
                          (call %init_peer_id% ("tracingSrv" "tracingEvent") ["get_logs_deal" "enter"])
                          (null)
                         )
                        )
                        (fold deals deal_id-0
                         (seq
                          (new $err
                           (seq
                            (seq
                             (seq
                              (par
                               (call %init_peer_id% ("tracingSrv" "tracingEvent") ["resolveSubnetwork" "enter"])
                               (null)
                              )
                              (new $records
                               (new $successful
                                (new $result
                                 (seq
                                  (seq
                                   (seq
                                    (call -relay- ("op" "noop") [])
                                    (xor
                                     (seq
                                      (seq
                                       (seq
                                        (seq
                                         (seq
                                          (seq
                                           (seq
                                            (seq
                                             (seq
                                              (seq
                                               (seq
                                                (seq
                                                 (par
                                                  (call %init_peer_id% ("tracingSrv" "tracingEvent") ["getInsecuredPeerId" "enter"])
                                                  (null)
                                                 )
                                                 (call -relay- ("insecure_sig" "get_peer_id") [] peer_id)
                                                )
                                                (par
                                                 (call %init_peer_id% ("tracingSrv" "tracingEvent") ["getInsecuredPeerId" "exit"])
                                                 (null)
                                                )
                                               )
                                               (call -relay- ("registry" "get_key_id") [deal_id-0 peer_id] key_id)
                                              )
                                              (par
                                               (call %init_peer_id% ("tracingSrv" "tracingEvent") ["getNeighbors" "enter"])
                                               (null)
                                              )
                                             )
                                             (call -relay- ("op" "string_to_b58") [key_id] k)
                                            )
                                            (call -relay- ("kad" "neighborhood") [k [] []] nodes)
                                           )
                                           (par
                                            (call %init_peer_id% ("tracingSrv" "tracingEvent") ["getNeighbors" "exit"])
                                            (null)
                                           )
                                          )
                                          (par
                                           (fold nodes n-0
                                            (par
                                             (seq
                                              (xor
                                               (xor
                                                (seq
                                                 (seq
                                                  (call n-0 ("peer" "timestamp_sec") [] t)
                                                  (call n-0 ("registry" "get_records") [key_id t] get_result)
                                                 )
                                                 (xor
                                                  (match get_result.$.success true
                                                   (seq
                                                    (ap get_result.$.result $records)
                                                    (ap true $successful)
                                                   )
                                                  )
                                                  (ap get_result.$.error $error)
                                                 )
                                                )
                                                (call n-0 ("op" "noop") [])
                                               )
                                               (seq
                                                (call -relay- ("op" "noop") [])
                                                (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                               )
                                              )
                                              (call -relay- ("op" "noop") [])
                                             )
                                             (next n-0)
                                            )
                                            (never)
                                           )
                                           (null)
                                          )
                                         )
                                         (par
                                          (call %init_peer_id% ("tracingSrv" "tracingEvent") ["wait" "enter"])
                                          (null)
                                         )
                                        )
                                        (new $status
                                         (new $result-0
                                          (seq
                                           (seq
                                            (seq
                                             (par
                                              (seq
                                               (seq
                                                (seq
                                                 (seq
                                                  (seq
                                                   (par
                                                    (call %init_peer_id% ("tracingSrv" "tracingEvent") ["waiting" "enter"])
                                                    (null)
                                                   )
                                                   (call -relay- ("math" "sub") [2 1] sub)
                                                  )
                                                  (new $successful_test
                                                   (seq
                                                    (seq
                                                     (seq
                                                      (call -relay- ("math" "add") [sub 1] successful_incr)
                                                      (fold $successful successful_fold_var
                                                       (seq
                                                        (seq
                                                         (ap successful_fold_var $successful_test)
                                                         (canon -relay- $successful_test  #successful_iter_canon)
                                                        )
                                                        (xor
                                                         (match #successful_iter_canon.length successful_incr
                                                          (null)
                                                         )
                                                         (next successful_fold_var)
                                                        )
                                                       )
                                                       (never)
                                                      )
                                                     )
                                                     (canon -relay- $successful_test  #successful_result_canon)
                                                    )
                                                    (ap #successful_result_canon successful_gate)
                                                   )
                                                  )
                                                 )
                                                 (call -relay- ("math" "sub") [2 1] sub-0)
                                                )
                                                (ap "ok" $status)
                                               )
                                               (par
                                                (call %init_peer_id% ("tracingSrv" "tracingEvent") ["waiting" "exit"])
                                                (null)
                                               )
                                              )
                                              (call -relay- ("peer" "timeout") [6000 "timeout"] $status)
                                             )
                                             (new $status_test
                                              (seq
                                               (seq
                                                (seq
                                                 (call -relay- ("math" "add") [0 1] status_incr)
                                                 (fold $status status_fold_var
                                                  (seq
                                                   (seq
                                                    (ap status_fold_var $status_test)
                                                    (canon -relay- $status_test  #status_iter_canon)
                                                   )
                                                   (xor
                                                    (match #status_iter_canon.length status_incr
                                                     (null)
                                                    )
                                                    (next status_fold_var)
                                                   )
                                                  )
                                                  (never)
                                                 )
                                                )
                                                (canon -relay- $status_test  #status_result_canon)
                                               )
                                               (ap #status_result_canon status_gate)
                                              )
                                             )
                                            )
                                            (xor
                                             (match status_gate.$.[0] "ok"
                                              (ap true $result-0)
                                             )
                                             (ap false $result-0)
                                            )
                                           )
                                           (new $result-0_test
                                            (seq
                                             (seq
                                              (seq
                                               (call -relay- ("math" "add") [0 1] result-0_incr)
                                               (fold $result-0 result-0_fold_var
                                                (seq
                                                 (seq
                                                  (ap result-0_fold_var $result-0_test)
                                                  (canon -relay- $result-0_test  #result-0_iter_canon)
                                                 )
                                                 (xor
                                                  (match #result-0_iter_canon.length result-0_incr
                                                   (null)
                                                  )
                                                  (next result-0_fold_var)
                                                 )
                                                )
                                                (never)
                                               )
                                              )
                                              (canon -relay- $result-0_test  #result-0_result_canon)
                                             )
                                             (ap #result-0_result_canon result-0_gate)
                                            )
                                           )
                                          )
                                         )
                                        )
                                       )
                                       (par
                                        (call %init_peer_id% ("tracingSrv" "tracingEvent") ["wait" "exit"])
                                        (null)
                                       )
                                      )
                                      (xor
                                       (match result-0_gate.$.[0] false
                                        (ap "timeout exceeded" $error)
                                       )
                                       (seq
                                        (seq
                                         (canon -relay- $records  #records_canon)
                                         (call -relay- ("registry" "merge") [#records_canon] merged)
                                        )
                                        (xor
                                         (match merged.$.success false
                                          (ap merged.$.error $error)
                                         )
                                         (ap merged.$.result $result)
                                        )
                                       )
                                      )
                                     )
                                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                                    )
                                   )
                                   (canon %init_peer_id% $result  #-result-fix-0)
                                  )
                                  (ap #-result-fix-0 -result-flat-0)
                                 )
                                )
                               )
                              )
                             )
                             (par
                              (call %init_peer_id% ("tracingSrv" "tracingEvent") ["resolveSubnetwork" "exit"])
                              (null)
                             )
                            )
                            (xor
                             (mismatch -result-flat-0 []
                              (xor
                               (fold -result-flat-0.$.[0] w-0
                                (seq
                                 (seq
                                  (seq
                                   (seq
                                    (seq
                                     (seq
                                      (seq
                                       (ap w-0.$.metadata w-0_flat)
                                       (ap w-0_flat.$.peer_id w-0_flat_flat)
                                      )
                                      (ap w-0.$.metadata w-0_flat-0)
                                     )
                                     (ap w-0_flat-0.$.relay_id w-0_flat-0_flat)
                                    )
                                    (call -relay- ("op" "noop") [])
                                   )
                                   (call w-0_flat-0_flat.$.[0] ("op" "noop") [])
                                  )
                                  (xor
                                   (seq
                                    (seq
                                     (seq
                                      (seq
                                       (seq
                                        (call w-0_flat_flat ("srv" "resolve_alias") ["worker-spell"] spell_id)
                                        (call w-0_flat_flat (spell_id "list_get_strings") ["logs"] get_res)
                                       )
                                       (call w-0_flat_flat ("json" "obj") ["deal_id" deal_id-0 "host_id" w-0_flat-0_flat.$.[0] "logs" get_res.$.strings "spell_id" spell_id "worker_id" w-0_flat_flat] LogDeal_obj)
                                      )
                                      (ap LogDeal_obj $logs)
                                     )
                                     (call w-0_flat-0_flat.$.[0] ("op" "noop") [])
                                    )
                                    (call -relay- ("op" "noop") [])
                                   )
                                   (seq
                                    (seq
                                     (call w-0_flat-0_flat.$.[0] ("op" "noop") [])
                                     (call -relay- ("op" "noop") [])
                                    )
                                    (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                                   )
                                  )
                                 )
                                 (next w-0)
                                )
                               )
                               (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                              )
                             )
                             (call %init_peer_id% ("op" "noop") [])
                            )
                           )
                          )
                          (next deal_id-0)
                         )
                        )
                       )
                       (par
                        (call %init_peer_id% ("tracingSrv" "tracingEvent") ["get_logs_deal" "exit"])
                        (null)
                       )
                      )
                      (xor
                       (seq
                        (canon %init_peer_id% $logs  #logs_canon)
                        (call %init_peer_id% ("callbackSrv" "response") [#logs_canon])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
                    )
    `;

export function get_logs_deal(
  deals: string[],
  config?: { ttl?: number }
): Promise<
  {
    deal_id: string;
    host_id: string;
    logs: string[];
    spell_id: string;
    worker_id: string;
  }[]
>;

export function get_logs_deal(
  peer: IFluenceClient$$,
  deals: string[],
  config?: { ttl?: number }
): Promise<
  {
    deal_id: string;
    host_id: string;
    logs: string[];
    spell_id: string;
    worker_id: string;
  }[]
>;

export function get_logs_deal(...args: any) {
  return callFunction$$(
    args,
    {
      functionName: "get_logs_deal",
      arrow: {
        tag: "arrow",
        domain: {
          tag: "labeledProduct",
          fields: {
            deals: {
              tag: "array",
              type: {
                tag: "scalar",
                name: "string",
              },
            },
          },
        },
        codomain: {
          tag: "unlabeledProduct",
          items: [
            {
              tag: "array",
              type: {
                tag: "struct",
                name: "LogDeal",
                fields: {
                  worker_id: {
                    tag: "scalar",
                    name: "string",
                  },
                  host_id: {
                    tag: "scalar",
                    name: "string",
                  },
                  logs: {
                    tag: "array",
                    type: {
                      tag: "scalar",
                      name: "string",
                    },
                  },
                  deal_id: {
                    tag: "scalar",
                    name: "string",
                  },
                  spell_id: {
                    tag: "scalar",
                    name: "string",
                  },
                },
              },
            },
          ],
        },
      },
      names: {
        relay: "-relay-",
        getDataSrv: "getDataSrv",
        callbackSrv: "callbackSrv",
        responseSrv: "callbackSrv",
        responseFnName: "response",
        errorHandlingSrv: "errorHandlingSrv",
        errorFnName: "error",
      },
    },
    get_logs_deal_script
  );
}

/* eslint-enable */
