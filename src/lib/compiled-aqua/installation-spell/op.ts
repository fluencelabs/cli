/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.10.2
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

export interface MOpDef {
    identity: (modules: { config: { name: string; }; hash: string; name: string; }[], callParams: CallParams$$<'modules'>) => { config: { name: string; }; hash: string; name: string; }[] | Promise<{ config: { name: string; }; hash: string; name: string; }[]>;
}
export function registerMOp(service: MOpDef): void;
export function registerMOp(serviceId: string, service: MOpDef): void;
export function registerMOp(peer: IFluenceClient$$, service: MOpDef): void;
export function registerMOp(peer: IFluenceClient$$, serviceId: string, service: MOpDef): void;
       

export function registerMOp(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "op",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "identity" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "modules" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Module",
                                "fields" : {
                                    "config" : {
                                        "tag" : "struct",
                                        "name" : "ModuleConfig",
                                        "fields" : {
                                            "name" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            }
                                        }
                                    },
                                    "hash" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "name" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Module",
                                "fields" : {
                                    "config" : {
                                        "tag" : "struct",
                                        "name" : "ModuleConfig",
                                        "fields" : {
                                            "name" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            }
                                        }
                                    },
                                    "hash" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "name" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface SOpDef {
    identity: (services: { blueprint_id: string; id: string; owner_id: string; }[], callParams: CallParams$$<'services'>) => { blueprint_id: string; id: string; owner_id: string; }[] | Promise<{ blueprint_id: string; id: string; owner_id: string; }[]>;
}
export function registerSOp(service: SOpDef): void;
export function registerSOp(serviceId: string, service: SOpDef): void;
export function registerSOp(peer: IFluenceClient$$, service: SOpDef): void;
export function registerSOp(peer: IFluenceClient$$, serviceId: string, service: SOpDef): void;
       

export function registerSOp(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "op",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "identity" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "services" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Service",
                                "fields" : {
                                    "blueprint_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "owner_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Service",
                                "fields" : {
                                    "blueprint_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "owner_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface CastDef {
    identity: (long: number, callParams: CallParams$$<'long'>) => number | Promise<number>;
}
export function registerCast(service: CastDef): void;
export function registerCast(serviceId: string, service: CastDef): void;
export function registerCast(peer: IFluenceClient$$, service: CastDef): void;
export function registerCast(peer: IFluenceClient$$, serviceId: string, service: CastDef): void;
       

export function registerCast(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "op",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "identity" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "long" : {
                            "tag" : "scalar",
                            "name" : "u64"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "u32"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions


/* eslint-enable */