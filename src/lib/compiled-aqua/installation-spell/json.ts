/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.10.2
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

export interface ModuleConfigJsonDef {
    parse: (json: string, callParams: CallParams$$<'json'>) => { name: string; } | Promise<{ name: string; }>;
}
export function registerModuleConfigJson(service: ModuleConfigJsonDef): void;
export function registerModuleConfigJson(serviceId: string, service: ModuleConfigJsonDef): void;
export function registerModuleConfigJson(peer: IFluenceClient$$, service: ModuleConfigJsonDef): void;
export function registerModuleConfigJson(peer: IFluenceClient$$, serviceId: string, service: ModuleConfigJsonDef): void;
       

export function registerModuleConfigJson(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "json",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "parse" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "json" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "ModuleConfig",
                            "fields" : {
                                "name" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface ISAJsonDef {
    stringify: (isa: { deal_id: string; ipfs: string; worker_def_cid: string; }, callParams: CallParams$$<'isa'>) => string | Promise<string>;
}
export function registerISAJson(service: ISAJsonDef): void;
export function registerISAJson(serviceId: string, service: ISAJsonDef): void;
export function registerISAJson(peer: IFluenceClient$$, service: ISAJsonDef): void;
export function registerISAJson(peer: IFluenceClient$$, serviceId: string, service: ISAJsonDef): void;
       

export function registerISAJson(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "json",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "stringify" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "isa" : {
                            "tag" : "struct",
                            "name" : "WorkerSpellArgs",
                            "fields" : {
                                "deal_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "ipfs" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "worker_def_cid" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface WDJsonDef {
    parse: (json: string, callParams: CallParams$$<'json'>) => { services: { modules: { config: string; wasm: string; }[]; name: string; }[]; spells: { config: string; init_args: string; name: string; script: string; }[]; } | Promise<{ services: { modules: { config: string; wasm: string; }[]; name: string; }[]; spells: { config: string; init_args: string; name: string; script: string; }[]; }>;
    stringify: (rac: { services: { modules: { config: string; wasm: string; }[]; name: string; }[]; spells: { config: string; init_args: string; name: string; script: string; }[]; }, callParams: CallParams$$<'rac'>) => string | Promise<string>;
}
export function registerWDJson(service: WDJsonDef): void;
export function registerWDJson(serviceId: string, service: WDJsonDef): void;
export function registerWDJson(peer: IFluenceClient$$, service: WDJsonDef): void;
export function registerWDJson(peer: IFluenceClient$$, serviceId: string, service: WDJsonDef): void;
       

export function registerWDJson(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "json",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "parse" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "json" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "WorkerDefinition",
                            "fields" : {
                                "services" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "struct",
                                        "name" : "Service",
                                        "fields" : {
                                            "modules" : {
                                                "tag" : "array",
                                                "type" : {
                                                    "tag" : "struct",
                                                    "name" : "Module",
                                                    "fields" : {
                                                        "config" : {
                                                            "tag" : "scalar",
                                                            "name" : "string"
                                                        },
                                                        "wasm" : {
                                                            "tag" : "scalar",
                                                            "name" : "string"
                                                        }
                                                    }
                                                }
                                            },
                                            "name" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            }
                                        }
                                    }
                                },
                                "spells" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "struct",
                                        "name" : "Spell",
                                        "fields" : {
                                            "config" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "init_args" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "name" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "script" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            "stringify" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "rac" : {
                            "tag" : "struct",
                            "name" : "WorkerDefinition",
                            "fields" : {
                                "services" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "struct",
                                        "name" : "Service",
                                        "fields" : {
                                            "modules" : {
                                                "tag" : "array",
                                                "type" : {
                                                    "tag" : "struct",
                                                    "name" : "Module",
                                                    "fields" : {
                                                        "config" : {
                                                            "tag" : "scalar",
                                                            "name" : "string"
                                                        },
                                                        "wasm" : {
                                                            "tag" : "scalar",
                                                            "name" : "string"
                                                        }
                                                    }
                                                }
                                            },
                                            "name" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            }
                                        }
                                    }
                                },
                                "spells" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "struct",
                                        "name" : "Spell",
                                        "fields" : {
                                            "config" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "init_args" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "name" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "script" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface JsonDef {
    obj_pairs: (pairs: string[][], callParams: CallParams$$<'pairs'>) => string | Promise<string>;
    stringify: (obj: string, callParams: CallParams$$<'obj'>) => string | Promise<string>;
}
export function registerJson(service: JsonDef): void;
export function registerJson(serviceId: string, service: JsonDef): void;
export function registerJson(peer: IFluenceClient$$, service: JsonDef): void;
export function registerJson(peer: IFluenceClient$$, serviceId: string, service: JsonDef): void;
       

export function registerJson(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "json",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "obj_pairs" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "pairs" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            },
            "stringify" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "obj" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface JsonStrDef {
    parse: (s: string, callParams: CallParams$$<'s'>) => string | Promise<string>;
}
export function registerJsonStr(service: JsonStrDef): void;
export function registerJsonStr(serviceId: string, service: JsonStrDef): void;
export function registerJsonStr(peer: IFluenceClient$$, service: JsonStrDef): void;
export function registerJsonStr(peer: IFluenceClient$$, serviceId: string, service: JsonStrDef): void;
       

export function registerJsonStr(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "json",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "parse" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "s" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions


/* eslint-enable */