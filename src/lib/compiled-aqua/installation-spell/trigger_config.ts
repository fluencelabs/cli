/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.10.2
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

// Functions
export type ClockArgC = { end_sec: number; period_sec: number; start_sec: number; } 
export type ClockResult = { blockchain: { end_block: number; start_block: number; }; clock: { end_sec: number; period_sec: number; start_sec: number; }; connections: { connect: boolean; disconnect: boolean; }; }
export function clock(
    c: ClockArgC,
    config?: {ttl?: number}
): Promise<ClockResult>;

export function clock(
    peer: IFluenceClient$$,
    c: ClockArgC,
    config?: {ttl?: number}
): Promise<ClockResult>;

export function clock(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "c") [] c)
                          )
                          (call %init_peer_id% ("json" "obj") ["end_sec" 0 "period_sec" 0 "start_sec" 0] ClockConfig_obj)
                         )
                         (call %init_peer_id% ("json" "obj") ["connect" false "disconnect" false] ConnectionPoolConfig_obj)
                        )
                        (call %init_peer_id% ("json" "obj") ["end_block" 0 "start_block" 0] BlockChainConfig_obj)
                       )
                       (call %init_peer_id% ("json" "obj") ["blockchain" BlockChainConfig_obj "clock" c "connections" ConnectionPoolConfig_obj] TriggerConfig_obj)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [TriggerConfig_obj])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "clock",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "c" : {
                    "tag" : "struct",
                    "name" : "ClockConfig",
                    "fields" : {
                        "end_sec" : {
                            "tag" : "scalar",
                            "name" : "u32"
                        },
                        "period_sec" : {
                            "tag" : "scalar",
                            "name" : "u32"
                        },
                        "start_sec" : {
                            "tag" : "scalar",
                            "name" : "u32"
                        }
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "TriggerConfig",
                    "fields" : {
                        "blockchain" : {
                            "tag" : "struct",
                            "name" : "BlockChainConfig",
                            "fields" : {
                                "end_block" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                },
                                "start_block" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                }
                            }
                        },
                        "clock" : {
                            "tag" : "struct",
                            "name" : "ClockConfig",
                            "fields" : {
                                "end_sec" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                },
                                "period_sec" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                },
                                "start_sec" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                }
                            }
                        },
                        "connections" : {
                            "tag" : "struct",
                            "name" : "ConnectionPoolConfig",
                            "fields" : {
                                "connect" : {
                                    "tag" : "scalar",
                                    "name" : "bool"
                                },
                                "disconnect" : {
                                    "tag" : "scalar",
                                    "name" : "bool"
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type OneshotResult = { blockchain: { end_block: number; start_block: number; }; clock: { end_sec: number; period_sec: number; start_sec: number; }; connections: { connect: boolean; disconnect: boolean; }; }
export function oneshot(
    config?: {ttl?: number}
): Promise<OneshotResult>;

export function oneshot(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<OneshotResult>;

export function oneshot(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                              (call %init_peer_id% ("peer" "timestamp_sec") [] timestamp_sec)
                             )
                             (call %init_peer_id% ("op" "identity") [timestamp_sec] now)
                            )
                            (call %init_peer_id% ("math" "add") [now 1] add)
                           )
                           (call %init_peer_id% ("json" "obj") ["end_sec" add "period_sec" 0 "start_sec" now] ClockConfig_obj)
                          )
                          (call %init_peer_id% ("json" "obj") ["end_sec" 0 "period_sec" 0 "start_sec" 0] ClockConfig_obj-0)
                         )
                         (call %init_peer_id% ("json" "obj") ["connect" false "disconnect" false] ConnectionPoolConfig_obj)
                        )
                        (call %init_peer_id% ("json" "obj") ["end_block" 0 "start_block" 0] BlockChainConfig_obj)
                       )
                       (call %init_peer_id% ("json" "obj") ["blockchain" BlockChainConfig_obj "clock" ClockConfig_obj "connections" ConnectionPoolConfig_obj] TriggerConfig_obj)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [TriggerConfig_obj])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "oneshot",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "TriggerConfig",
                    "fields" : {
                        "blockchain" : {
                            "tag" : "struct",
                            "name" : "BlockChainConfig",
                            "fields" : {
                                "end_block" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                },
                                "start_block" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                }
                            }
                        },
                        "clock" : {
                            "tag" : "struct",
                            "name" : "ClockConfig",
                            "fields" : {
                                "end_sec" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                },
                                "period_sec" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                },
                                "start_sec" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                }
                            }
                        },
                        "connections" : {
                            "tag" : "struct",
                            "name" : "ConnectionPoolConfig",
                            "fields" : {
                                "connect" : {
                                    "tag" : "scalar",
                                    "name" : "bool"
                                },
                                "disconnect" : {
                                    "tag" : "scalar",
                                    "name" : "bool"
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type TimesResult = { blockchain: { end_block: number; start_block: number; }; clock: { end_sec: number; period_sec: number; start_sec: number; }; connections: { connect: boolean; disconnect: boolean; }; }
export function times(
    times: number,
    period_sec: number,
    config?: {ttl?: number}
): Promise<TimesResult>;

export function times(
    peer: IFluenceClient$$,
    times: number,
    period_sec: number,
    config?: {ttl?: number}
): Promise<TimesResult>;

export function times(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (seq
                                (seq
                                 (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                                 (call %init_peer_id% ("getDataSrv" "times") [] times)
                                )
                                (call %init_peer_id% ("getDataSrv" "period_sec") [] period_sec)
                               )
                               (call %init_peer_id% ("peer" "timestamp_sec") [] timestamp_sec)
                              )
                              (call %init_peer_id% ("op" "identity") [timestamp_sec] now)
                             )
                             (call %init_peer_id% ("math" "mul") [period_sec times] mul)
                            )
                            (call %init_peer_id% ("math" "add") [now mul] add)
                           )
                           (call %init_peer_id% ("json" "obj") ["end_sec" add "period_sec" period_sec "start_sec" now] ClockConfig_obj)
                          )
                          (call %init_peer_id% ("json" "obj") ["end_sec" 0 "period_sec" 0 "start_sec" 0] ClockConfig_obj-0)
                         )
                         (call %init_peer_id% ("json" "obj") ["connect" false "disconnect" false] ConnectionPoolConfig_obj)
                        )
                        (call %init_peer_id% ("json" "obj") ["end_block" 0 "start_block" 0] BlockChainConfig_obj)
                       )
                       (call %init_peer_id% ("json" "obj") ["blockchain" BlockChainConfig_obj "clock" ClockConfig_obj "connections" ConnectionPoolConfig_obj] TriggerConfig_obj)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [TriggerConfig_obj])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "times",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "times" : {
                    "tag" : "scalar",
                    "name" : "u32"
                },
                "period_sec" : {
                    "tag" : "scalar",
                    "name" : "u32"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "TriggerConfig",
                    "fields" : {
                        "blockchain" : {
                            "tag" : "struct",
                            "name" : "BlockChainConfig",
                            "fields" : {
                                "end_block" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                },
                                "start_block" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                }
                            }
                        },
                        "clock" : {
                            "tag" : "struct",
                            "name" : "ClockConfig",
                            "fields" : {
                                "end_sec" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                },
                                "period_sec" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                },
                                "start_sec" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                }
                            }
                        },
                        "connections" : {
                            "tag" : "struct",
                            "name" : "ConnectionPoolConfig",
                            "fields" : {
                                "connect" : {
                                    "tag" : "scalar",
                                    "name" : "bool"
                                },
                                "disconnect" : {
                                    "tag" : "scalar",
                                    "name" : "bool"
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type PeriodResult = { blockchain: { end_block: number; start_block: number; }; clock: { end_sec: number; period_sec: number; start_sec: number; }; connections: { connect: boolean; disconnect: boolean; }; }
export function period(
    period_sec: number,
    config?: {ttl?: number}
): Promise<PeriodResult>;

export function period(
    peer: IFluenceClient$$,
    period_sec: number,
    config?: {ttl?: number}
): Promise<PeriodResult>;

export function period(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                              (call %init_peer_id% ("getDataSrv" "period_sec") [] period_sec)
                             )
                             (call %init_peer_id% ("peer" "timestamp_sec") [] timestamp_sec)
                            )
                            (call %init_peer_id% ("op" "identity") [timestamp_sec] now)
                           )
                           (call %init_peer_id% ("json" "obj") ["end_sec" 0 "period_sec" period_sec "start_sec" now] ClockConfig_obj)
                          )
                          (call %init_peer_id% ("json" "obj") ["end_sec" 0 "period_sec" 0 "start_sec" 0] ClockConfig_obj-0)
                         )
                         (call %init_peer_id% ("json" "obj") ["connect" false "disconnect" false] ConnectionPoolConfig_obj)
                        )
                        (call %init_peer_id% ("json" "obj") ["end_block" 0 "start_block" 0] BlockChainConfig_obj)
                       )
                       (call %init_peer_id% ("json" "obj") ["blockchain" BlockChainConfig_obj "clock" ClockConfig_obj "connections" ConnectionPoolConfig_obj] TriggerConfig_obj)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [TriggerConfig_obj])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "period",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "period_sec" : {
                    "tag" : "scalar",
                    "name" : "u32"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "TriggerConfig",
                    "fields" : {
                        "blockchain" : {
                            "tag" : "struct",
                            "name" : "BlockChainConfig",
                            "fields" : {
                                "end_block" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                },
                                "start_block" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                }
                            }
                        },
                        "clock" : {
                            "tag" : "struct",
                            "name" : "ClockConfig",
                            "fields" : {
                                "end_sec" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                },
                                "period_sec" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                },
                                "start_sec" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                }
                            }
                        },
                        "connections" : {
                            "tag" : "struct",
                            "name" : "ConnectionPoolConfig",
                            "fields" : {
                                "connect" : {
                                    "tag" : "scalar",
                                    "name" : "bool"
                                },
                                "disconnect" : {
                                    "tag" : "scalar",
                                    "name" : "bool"
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

/* eslint-enable */