/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.10.2
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

export interface IpfsClientDef {
    exists: (multiaddr: string, cid: string, callParams: CallParams$$<'multiaddr' | 'cid'>) => boolean | Promise<boolean>;
    id: (multiaddr: string, callParams: CallParams$$<'multiaddr'>) => string | Promise<string>;
    remove: (multiaddr: string, cid: string, callParams: CallParams$$<'multiaddr' | 'cid'>) => string | Promise<string>;
    upload: (multiaddr: string, path: string, callParams: CallParams$$<'multiaddr' | 'path'>) => string | Promise<string>;
    upload_string: (multiaddr: string, contents: string, callParams: CallParams$$<'multiaddr' | 'contents'>) => string | Promise<string>;
}
export function registerIpfsClient(service: IpfsClientDef): void;
export function registerIpfsClient(serviceId: string, service: IpfsClientDef): void;
export function registerIpfsClient(peer: IFluenceClient$$, service: IpfsClientDef): void;
export function registerIpfsClient(peer: IFluenceClient$$, serviceId: string, service: IpfsClientDef): void;
       

export function registerIpfsClient(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "ipfs_client",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "exists" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "multiaddr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "cid" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    ]
                }
            },
            "id" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "multiaddr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            },
            "remove" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "multiaddr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "cid" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            },
            "upload" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "multiaddr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "path" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            },
            "upload_string" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "multiaddr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "contents" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface FileSystemDef {
    list: (directory: string, callParams: CallParams$$<'directory'>) => string[] | Promise<string[]>;
    list_ext: (directory: string, ext: string, callParams: CallParams$$<'directory' | 'ext'>) => string[] | Promise<string[]>;
}
export function registerFileSystem(service: FileSystemDef): void;
export function registerFileSystem(serviceId: string, service: FileSystemDef): void;
export function registerFileSystem(peer: IFluenceClient$$, service: FileSystemDef): void;
export function registerFileSystem(peer: IFluenceClient$$, serviceId: string, service: FileSystemDef): void;
       

export function registerFileSystem(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "file_system",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "list" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "directory" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    ]
                }
            },
            "list_ext" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "directory" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "ext" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
 

export function upload_script(
    ipfs: string,
    path: string,
    config?: {ttl?: number}
): Promise<string>;

export function upload_script(
    peer: IFluenceClient$$,
    ipfs: string,
    path: string,
    config?: {ttl?: number}
): Promise<string>;

export function upload_script(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "ipfs") [] ipfs)
                        )
                        (call %init_peer_id% ("getDataSrv" "path") [] path)
                       )
                       (call %init_peer_id% ("ipfs_client" "upload_string") [ipfs path] upload_string)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [upload_string])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "upload_script",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "ipfs" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "path" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

/* eslint-enable */